@page "/archive"
@using Dcidr.Model.Serialization

@inject DcidrAppModel AppModel
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService localStorage


<h1>Archive</h1>

@if (!isLoading)
{
    @if (showList)
    {
        @foreach (var d in decisionArchive.Decisions)
        {
            <ArchiveItem @key="@d.Id" 
                         Item="@d" 
                         OnDelete="DeleteDecisionAsync" 
                         OnLoad="LoadDecisionAsync"></ArchiveItem>
        }
    }
    else
    {
        <em>No archived decisions</em>
    }
}
else
{
    <h3>Loading...</h3>
}


@code {

    private bool isLoading;
    private bool showList;
    private DecisionArchive decisionArchive;

    private async Task Refresh()
    {
        isLoading = true;
        decisionArchive = await localStorage.GetItemAsync<DecisionArchive>("decision-archive") ?? new DecisionArchive();
        showList = decisionArchive.Decisions.Any();
        isLoading = false;
    }

    protected override async Task OnInitializedAsync()
    {
        await Refresh();
    }

    private async Task DeleteDecisionAsync(DecisionArchiveItem decisionArchiveItem)
    {
        await localStorage.RemoveItemAsync($"decision-{decisionArchiveItem.Id}");

        await localStorage.GetItemAsync<DecisionArchive>("decision-archive");
        decisionArchive.Remove(decisionArchiveItem);
        await localStorage.SetItemAsync("decision-archive", decisionArchive);
        
        await Refresh();
    }

    private async Task LoadDecisionAsync(DecisionArchiveItem decisionArchiveItem)
    {
        var sd = await localStorage.GetItemAsync<SerializedDecision>($"decision-{decisionArchiveItem.Id}");
        if (sd == null)
        {
            System.Diagnostics.Debug.Fail($"Decision {decisionArchiveItem.Id} was not found in local storage");
        }
        else
        {
            try
            {
                AppModel.Decision = Decision.Deserialize(sd);
                NavigationManager.NavigateTo("criteria");
            }
            catch(Exception e)
            {
                System.Diagnostics.Debug.Fail("Cound not deserialize decision", e.Message);
            }
        }
    }
}