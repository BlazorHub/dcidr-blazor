@page "/results"
@inject DcidrAppModel AppModel
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@using Dcidr.Blazor.Extensions
@using Dcidr.Excel

<h1>Results</h1>

<p class="mb-3">
    <small><strong>All done!</strong>  Here's how your options are ranked based on your responses:</small>
</p>

<ol class="result-container mb-3">
    @foreach (var result in AppModel.Decision.Results)
    {
        <li>
            <div class="result-bar"></div>
            <div>
                <strong>@result.Option</strong>
                <small>@($"{result.Score.ToString("P2")}")</small>
            </div>
        </li>
    }
</ol>

<hr/>

<a class="d-btn" href="">&lt;&nbsp;Back</a>

<hr />

<div><strong>Save this decision to your device</strong></div>


<div class="input-group mb-3 input-group-container">
    <input type="text" class="form-control" name="decision-name" maxlength="20"
           @bind="AppModel.Decision.Name"
           @onkeyup="OnNameKeyup"
           placeholder="Enter a name">
    <div class="input-group-append">
        <button class="btn btn-primary" disabled="@isLoading" @onclick="SaveAsync" type="button">Save</button>
    </div>
</div>
<hr />

<button class="d-btn" @onclick="DownloadExcelFile">Download Excel File</button>


<hr />

<a class="d-btn" href="">Go home</a>


@code {
    private bool isLoading;

    protected override void OnInitialized()
    {
        if (!AppModel.Decision.ResultPrerequisitesMet)
        {
            NavigationManager.NavigateTo("/criteria");
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var cssFriendlyWidthPercentages = AppModel.Decision.Results.Select(r => $"{(r.Score * 100).ToString("N0")}%").ToList();
        await JSRuntime.InvokeVoidAsync("dcidr.interop.applyResultBarWidths", ".result-bar", cssFriendlyWidthPercentages);
    }


    private async Task OnNameKeyup(KeyboardEventArgs args)
    {
        if (args.Key == "Enter")
        {
            await SaveAsync();
        }
    }

    private async Task SaveAsync()
    {
        if (string.IsNullOrWhiteSpace(AppModel.Decision.Name) || AppModel.Decision.Name.Length < 1) return;

        isLoading = true;

        var serializedDecision = AppModel.Decision.Serialize();

        await localStorage.SetItemAsync($"decision-{AppModel.Decision.Id}", serializedDecision);

        var decsisionArchiveItem = new DecisionArchiveItem
        {
            Id = AppModel.Decision.Id,
            Name = AppModel.Decision.Name,
            DateCreatedUtc = AppModel.Decision.DateCreatedUtc
        };

        var archive = await localStorage.GetItemAsync<DecisionArchive>("decision-archive");
        if (archive == null)
        {
            archive = new DecisionArchive();
        }

        archive.Upsert(decsisionArchiveItem);

        await localStorage.SetItemAsync("decision-archive", archive);

        isLoading = false;

        NavigationManager.NavigateTo("archive");

    }

    private void DownloadExcelFile()
    {
        var excelBytes = ExcelExporter.GenerateExcel(AppModel.Decision);
        JSRuntime.SaveAs($"{AppModel.Decision.Id}.xlsx", excelBytes);
    }
}
